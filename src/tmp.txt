

export class _Person extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            working: false,
            showCamera: false,
            imgBase64: "",
            data: [],
            axisData: []
        };
        this.count = 0;
        this.hawkeye = {
            url: `http://${props.ip}:${props.port}`,
        };

        this.handleStartStopButtonClick = this.handleStartStopButtonClick.bind(this);
        this.handleShowCameraButtonClick = this.handleShowCameraButtonClick.bind(this);
        this.handleHideCameraButtonClick = this.handleHideCameraButtonClick.bind(this);
        this.fetchNewData = this.fetchNewData.bind(this);
    }

    render() {
        return (
            <div>
                <h2>{this.props.uuid}</h2>
                <h2>{this.props.name}</h2>
                <p>{this.hawkeye.url}</p>
                <br/>
                <DynamicChart data={this.state.data} axisData={this.state.axisData}/>
                <button onClick={this.handleStartStopButtonClick}>Start/Stop</button>
                <button onClick={this.handleShowCameraButtonClick}>Show camera</button>
                <button onClick={this.handleHideCameraButtonClick}>Hide camera</button>
                <br/>
                {this.state.showCamera ?
                    <img id={"cam-" + this.props.uuid} alt={this.props.name + " Camara Picture"}
                    src={"data:image/jpg;base64," + this.state.imgBase64}/> : null}
            </div>
        )
    }

    fetchNewData() {
        // console.log('fetch')
        /*
        $.getJSON(this.props.url).done(function (data) {
            ..
            newData.push(data.value);
            ..
        });
         */

        let newData = cloneDeep(this.state.data);
        let newAxisData = cloneDeep(this.state.axisData);

        if (this.count === TOTAL_POINT) {
            newData.shift();
            newAxisData.shift();
        }
        this.count = (this.count + 1) % TOTAL_POINT;

        newData.push(Math.random()*3-1.5);
        // newData.push(data.value);
        newAxisData.push(this.count);

        this.setState({data: newData, axisData: newAxisData});
    }

    handleStartStopButtonClick() {
        if (this.state.working) {
            clearInterval(this.timer);
        } else {
            this.timer = setInterval(this.fetchNewData, 500);
        }
        this.setState({working: !this.state.working});
    }

    handleShowCameraButtonClick() {
        $.getJSON(this.hawkeye.url + '/camera')
            .done((data) => {this.setState({showCamera: true, imgBase64: data.value});})
            .fail((data) => {
                this.setState({showCamera: false})
                console.log("Camera fetch failed:" + data.readyState);
            });
    }

    handleHideCameraButtonClick() {
        this.setState({showCamera: false});
    }
}